<!--===================================================================================================================
Released under the MIT License.
    
Copyright (c) 2018 Ntreev Soft co., Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
====================================================================================================================-->
<UserControl x:Class="Ntreev.Crema.Client.Framework.Dialogs.Views.CodeEditorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:cal="http://www.caliburnproject.org"
             xmlns:reskeys="clr-namespace:Ntreev.Crema.Client.Framework.Dialogs.Views.CodeEditorThemes"
             xmlns:controls="clr-namespace:Ntreev.ModernUI.Framework.Controls;assembly=Ntreev.ModernUI.Framework"
             xmlns:res="clr-namespace:Ntreev.Crema.Client.Framework.Properties"
             mc:Ignorable="d" 
             controls:DialogWindow.DesiredResizeMode="CanResizeWithGrip"
             controls:DialogWindow.DesiredHeight="600" 
             controls:DialogWindow.DesiredWidth="800" 
             d:DesignHeight="450" 
             d:DesignWidth="800">
    <UserControl.Resources>
        <Style TargetType="{x:Type avalonEdit:TextEditor}">
            <Setter Property="FlowDirection" Value="LeftToRight" />
            <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorBackground}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorForeground}}" />
            <Setter Property="LineNumbersForeground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorLineNumbersForeground}}" />
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu>
                        <MenuItem Command="Cut" Header="Cut">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Cut}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="Copy" Header="Copy">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Copy}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="Paste" Header="Paste">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Paste}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="Delete" Header="Delete">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Delete}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator />
                        <MenuItem Command="Undo" Header="Undo">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Undo}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="Redo" Header="Redo">
                            <MenuItem.Icon>
                                <Image Height="16"
                                       SnapsToDevicePixels="True"
                                       Source="{DynamicResource Image_Redo}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type avalonEdit:TextEditor}">
                        <ControlTemplate.Resources>
                            <Style TargetType="{x:Type avalonEdit:TextView}">
                                <Setter Property="NonPrintableCharacterBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorNonPrintableCharacterBrush}}" />
                                <Setter Property="LinkTextForegroundBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorLinkTextForegroundBrush}}" />
                                <Setter Property="LinkTextBackgroundBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorLinkTextBackgroundBrush}}" />
                            </Style>

                            <Style TargetType="{x:Type avalonEdit:TextArea}">
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.EditorSelectionBrush}}" />
                                <Setter Property="SelectionBorder">
                                    <Setter.Value>
                                        <Pen Brush="{DynamicResource {x:Static reskeys:ResourceKeys.EditorSelectionBorder}}" Thickness="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="SelectionCornerRadius" Value="0" />
                                <Setter Property="SelectionForeground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type avalonEdit:TextArea}">
                                            <DockPanel Focusable="False">
                                                <ItemsControl DockPanel.Dock="Left"
                                                                              Focusable="False"
                                                                              ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LeftMargins}">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Horizontal" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                                <ContentPresenter Panel.ZIndex="-1"
                                                                                  Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextView}"
                                                                                  Focusable="False" />
                                            </DockPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ControlTemplate.Resources>
                        <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer Name="PART_ScrollViewer"
                                                          Padding="{TemplateBinding Padding}"
                                                          HorizontalContentAlignment="Left"
                                                          VerticalContentAlignment="Top"
                                                          CanContentScroll="True"
                                                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextArea}"
                                                          Focusable="False"
                                                          HorizontalScrollBarVisibility="Auto"
                                                          VerticalScrollBarVisibility="Auto" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WordWrap" Value="True">
                                <Setter TargetName="PART_ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <Menu.Resources>
                <Style TargetType="{x:Type Menu}">
                    <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
                </Style>
            </Menu.Resources>
            <Menu.ItemContainerStyle>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItem_Style}">
                    <Setter Property="Margin" Value="0" />
                    <Setter Property="MinWidth" Value="80" />
                </Style>
            </Menu.ItemContainerStyle>
            <MenuItem>
                <MenuItem.Header>
                    <TextBlock VerticalAlignment="Center" Text="{x:Static res:Resources.MenuItem_File}" />
                </MenuItem.Header>
                <MenuItem Header="Save" cal:Message.Attach="Save" IsEnabled="{Binding IsDirty}" />
                <Separator />
                <MenuItem Header="E_xit" cal:Message.Attach="Exit" />
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <TextBlock VerticalAlignment="Center" Text="{x:Static res:Resources.MenuItem_Options}" />
                </MenuItem.Header>
                <MenuItem Header="Show Line Numbers" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=ShowLineNumbers}" />
                <MenuItem Header="Show End of Line" IsCheckable="True" IsChecked="{Binding ElementName=textEditor,Path=Options.ShowEndOfLine}" />
                <MenuItem Header="Show Space" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=Options.ShowSpaces}" />
                <MenuItem Header="Show Tabs" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=Options.ShowTabs}" />
                <Separator />
                <MenuItem Header="WordWrap" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=WordWrap}" />
                <MenuItem Header="Convert Tabs to Spaces" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=Options.ConvertTabsToSpaces}" />
                <MenuItem Header="Highlight CurrentLine" IsCheckable="True" IsChecked="{Binding ElementName=textEditor, Path=Options.HighlightCurrentLine}" />
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <ComboBox Focusable="False"
                              VerticalAlignment="Center"
                              SelectedItem="{Binding HighlightingDefinition}"
                              ItemsSource="{Binding HighlightingDefinitions, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                </MenuItem.Header>
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <ComboBox Focusable="False"
                              ItemsSource="{Binding ThemeNames}"
                              SelectedItem="{Binding SelectedTheme}"
                              cal:Message.Attach="[Event SelectionChanged] = [Action ChangeThemeComboBox_OnSelectionChanged($this, $eventArgs)]" />
                </MenuItem.Header>
            </MenuItem>
        </Menu>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <avalonEdit:TextEditor
                x:Name="textEditor"
                FontFamily="Consolas, Courier, Courier New"
                FontSize="10pt"
                Document="{Binding Document}"
                IsReadOnly="{Binding IsReadOnly}"
                SyntaxHighlighting="{Binding HighlightingDefinition, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                cal:Message.Attach="[Event TextChanged] = [Action TextEditor_TextChanged($this, $eventArgs)]">
                <avalonEdit:TextEditor.InputBindings>
                    <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveCommand}" />
                </avalonEdit:TextEditor.InputBindings>
            </avalonEdit:TextEditor>
        </Grid>
    </DockPanel>
</UserControl>
